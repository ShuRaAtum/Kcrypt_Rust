// test vectors
// Key          :00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff 
// Plaintext    :00 00 00 00 00 00 00 00 
// Ciphertext   :00 f4 18 ae d9 4f 03 f2

static DELTA: [u8; 128] = [
    0x5A,0x6D,0x36,0x1B,0x0D,0x06,0x03,0x41,
    0x60,0x30,0x18,0x4C,0x66,0x33,0x59,0x2C,
    0x56,0x2B,0x15,0x4A,0x65,0x72,0x39,0x1C,
    0x4E,0x67,0x73,0x79,0x3C,0x5E,0x6F,0x37,
    0x5B,0x2D,0x16,0x0B,0x05,0x42,0x21,0x50,
    0x28,0x54,0x2A,0x55,0x6A,0x75,0x7A,0x7D,
    0x3E,0x5F,0x2F,0x17,0x4B,0x25,0x52,0x29,
    0x14,0x0A,0x45,0x62,0x31,0x58,0x6C,0x76,
    0x3B,0x1D,0x0E,0x47,0x63,0x71,0x78,0x7C,
    0x7E,0x7F,0x3F,0x1F,0x0F,0x07,0x43,0x61,
    0x70,0x38,0x5C,0x6E,0x77,0x7B,0x3D,0x1E,
    0x4F,0x27,0x53,0x69,0x34,0x1A,0x4D,0x26,
    0x13,0x49,0x24,0x12,0x09,0x04,0x02,0x01,
    0x40,0x20,0x10,0x08,0x44,0x22,0x11,0x48,
    0x64,0x32,0x19,0x0C,0x46,0x23,0x51,0x68,
    0x74,0x3A,0x5D,0x2E,0x57,0x6B,0x35,0x5A];

static HIGHT_F0: [u8; 256] = [
    0x00,0x86,0x0D,0x8B,0x1A,0x9C,0x17,0x91,
    0x34,0xB2,0x39,0xBF,0x2E,0xA8,0x23,0xA5,
    0x68,0xEE,0x65,0xE3,0x72,0xF4,0x7F,0xF9,
    0x5C,0xDA,0x51,0xD7,0x46,0xC0,0x4B,0xCD,
    0xD0,0x56,0xDD,0x5B,0xCA,0x4C,0xC7,0x41,
    0xE4,0x62,0xE9,0x6F,0xFE,0x78,0xF3,0x75,
    0xB8,0x3E,0xB5,0x33,0xA2,0x24,0xAF,0x29,
    0x8C,0x0A,0x81,0x07,0x96,0x10,0x9B,0x1D,
    0xA1,0x27,0xAC,0x2A,0xBB,0x3D,0xB6,0x30,
    0x95,0x13,0x98,0x1E,0x8F,0x09,0x82,0x04,
    0xC9,0x4F,0xC4,0x42,0xD3,0x55,0xDE,0x58,
    0xFD,0x7B,0xF0,0x76,0xE7,0x61,0xEA,0x6C,
    0x71,0xF7,0x7C,0xFA,0x6B,0xED,0x66,0xE0,
    0x45,0xC3,0x48,0xCE,0x5F,0xD9,0x52,0xD4,
    0x19,0x9F,0x14,0x92,0x03,0x85,0x0E,0x88,
    0x2D,0xAB,0x20,0xA6,0x37,0xB1,0x3A,0xBC,
    0x43,0xC5,0x4E,0xC8,0x59,0xDF,0x54,0xD2,
    0x77,0xF1,0x7A,0xFC,0x6D,0xEB,0x60,0xE6,
    0x2B,0xAD,0x26,0xA0,0x31,0xB7,0x3C,0xBA,
    0x1F,0x99,0x12,0x94,0x05,0x83,0x08,0x8E,
    0x93,0x15,0x9E,0x18,0x89,0x0F,0x84,0x02,
    0xA7,0x21,0xAA,0x2C,0xBD,0x3B,0xB0,0x36,
    0xFB,0x7D,0xF6,0x70,0xE1,0x67,0xEC,0x6A,
    0xCF,0x49,0xC2,0x44,0xD5,0x53,0xD8,0x5E,
    0xE2,0x64,0xEF,0x69,0xF8,0x7E,0xF5,0x73,
    0xD6,0x50,0xDB,0x5D,0xCC,0x4A,0xC1,0x47,
    0x8A,0x0C,0x87,0x01,0x90,0x16,0x9D,0x1B,
    0xBE,0x38,0xB3,0x35,0xA4,0x22,0xA9,0x2F,
    0x32,0xB4,0x3F,0xB9,0x28,0xAE,0x25,0xA3,
    0x06,0x80,0x0B,0x8D,0x1C,0x9A,0x11,0x97,
    0x5A,0xDC,0x57,0xD1,0x40,0xC6,0x4D,0xCB,
    0x6E,0xE8,0x63,0xE5,0x74,0xF2,0x79,0xFF];

static HIGHT_F1: [u8; 256] = [
    0x00,0x58,0xB0,0xE8,0x61,0x39,0xD1,0x89,
    0xC2,0x9A,0x72,0x2A,0xA3,0xFB,0x13,0x4B,
    0x85,0xDD,0x35,0x6D,0xE4,0xBC,0x54,0x0C,
    0x47,0x1F,0xF7,0xAF,0x26,0x7E,0x96,0xCE,
    0x0B,0x53,0xBB,0xE3,0x6A,0x32,0xDA,0x82,
    0xC9,0x91,0x79,0x21,0xA8,0xF0,0x18,0x40,
    0x8E,0xD6,0x3E,0x66,0xEF,0xB7,0x5F,0x07,
    0x4C,0x14,0xFC,0xA4,0x2D,0x75,0x9D,0xC5,
    0x16,0x4E,0xA6,0xFE,0x77,0x2F,0xC7,0x9F,
    0xD4,0x8C,0x64,0x3C,0xB5,0xED,0x05,0x5D,
    0x93,0xCB,0x23,0x7B,0xF2,0xAA,0x42,0x1A,
    0x51,0x09,0xE1,0xB9,0x30,0x68,0x80,0xD8,
    0x1D,0x45,0xAD,0xF5,0x7C,0x24,0xCC,0x94,
    0xDF,0x87,0x6F,0x37,0xBE,0xE6,0x0E,0x56,
    0x98,0xC0,0x28,0x70,0xF9,0xA1,0x49,0x11,
    0x5A,0x02,0xEA,0xB2,0x3B,0x63,0x8B,0xD3,
    0x2C,0x74,0x9C,0xC4,0x4D,0x15,0xFD,0xA5,
    0xEE,0xB6,0x5E,0x06,0x8F,0xD7,0x3F,0x67,
    0xA9,0xF1,0x19,0x41,0xC8,0x90,0x78,0x20,
    0x6B,0x33,0xDB,0x83,0x0A,0x52,0xBA,0xE2,
    0x27,0x7F,0x97,0xCF,0x46,0x1E,0xF6,0xAE,
    0xE5,0xBD,0x55,0x0D,0x84,0xDC,0x34,0x6C,
    0xA2,0xFA,0x12,0x4A,0xC3,0x9B,0x73,0x2B,
    0x60,0x38,0xD0,0x88,0x01,0x59,0xB1,0xE9,
    0x3A,0x62,0x8A,0xD2,0x5B,0x03,0xEB,0xB3,
    0xF8,0xA0,0x48,0x10,0x99,0xC1,0x29,0x71,
    0xBF,0xE7,0x0F,0x57,0xDE,0x86,0x6E,0x36,
    0x7D,0x25,0xCD,0x95,0x1C,0x44,0xAC,0xF4,
    0x31,0x69,0x81,0xD9,0x50,0x08,0xE0,0xB8,
    0xF3,0xAB,0x43,0x1B,0x92,0xCA,0x22,0x7A,
    0xB4,0xEC,0x04,0x5C,0xD5,0x8D,0x65,0x3D,
    0x76,0x2E,0xC6,0x9E,0x17,0x4F,0xA7,0xFF];

fn keyschedule(rk:&mut [u8; 136], mk: &[u8; 16]) {

    // WK 생성
    for i in 0..4 {
        rk[i] = mk[i+12];
        rk[i+4] = mk[i];
    }
    
    // SK 생성
    for i in 0..8 {
        for j in 0..8 {
            rk[8+16*i+j] = mk[(j.wrapping_sub(i))&7].wrapping_add(DELTA[16*i+j]);
            rk[8+16*i+j+8] = mk[((j.wrapping_sub(i))&7)+8].wrapping_add(DELTA[16*i+j+8]);
        }
    }
}




fn initial_transformation(pt:&mut[u8; 8], rk:&mut [u8; 136]) {

    pt[0] = pt[0].wrapping_add(rk[0]) & 0xff;
    pt[2] = pt[2] ^ rk[1];
    pt[4] = pt[4].wrapping_add(rk[2]) & 0xff;
    pt[6] = pt[6] ^ rk[3];

}

fn round_function(pt:&mut[u8; 8], rk:&mut [u8; 136], r: usize, i0: usize, i1: usize, i2: usize, i3: usize, i4: usize, i5: usize, i6: usize, i7: usize,) {

    pt[i0] = (pt[i0] ^ (HIGHT_F0[pt[i1] as usize].wrapping_add(rk[4*r+3]))) & 0xFF;
    pt[i2] = (pt[i2].wrapping_add(HIGHT_F1[pt[i3] as usize] ^ (rk[4*r+2]))) & 0xFF;
    pt[i4] = (pt[i4] ^ (HIGHT_F0[pt[i5] as usize].wrapping_add(rk[4*r+1]))) & 0xFF;
    pt[i6] = (pt[i6].wrapping_add(HIGHT_F1[pt[i7] as usize] ^ (rk[4*r]))) & 0xFF;

}

fn final_transformation(pt:&mut[u8; 8], rk:&mut [u8; 136]) {

    let mut state: [u8; 8] = [0; 8];

    state[1] = pt[2];
    state[3] = pt[4];
    state[5] = pt[6];
    state[7] = pt[0];

    state[0] = pt[1].wrapping_add(rk[4]);
    state[2] = pt[3] ^ rk[5];
    state[4] = pt[5].wrapping_add(rk[6]);
    state[6] = pt[7] ^ rk[7];

    for i in 0..8 {
        pt[i] = state[i];
    }
}

fn dec_initial_transformation(pt:&mut[u8; 8], rk:&mut [u8; 136]) {

    let mut state: [u8; 8] = [0; 8];

    state[2] = pt[1];
    state[4] = pt[3];
    state[6] = pt[5];
    state[0] = pt[7];

    state[1] = pt[0].wrapping_sub(rk[4]);
    state[3] = pt[2] ^ rk[5];
    state[5] = pt[4].wrapping_sub(rk[6]);
    state[7] = pt[6] ^ rk[7];

    for i in 0..8 {
        pt[i] = state[i];
    }
}

fn dec_round_function(pt:&mut[u8; 8], rk:&mut [u8; 136], r: usize, i0: usize, i1: usize, i2: usize, i3: usize, i4: usize, i5: usize, i6: usize, i7: usize,) {

    pt[i1] = (pt[i1].wrapping_sub(HIGHT_F1[pt[i2] as usize] ^ (rk[4*r+2]))) & 0xFF;
    pt[i3] = (pt[i3] ^ (HIGHT_F0[pt[i4] as usize].wrapping_add(rk[4*r+1]))) & 0xFF;
    pt[i5] = (pt[i5].wrapping_sub(HIGHT_F1[pt[i6] as usize] ^ (rk[4*r+0]))) & 0xFF;
    pt[i7] = (pt[i7] ^ (HIGHT_F0[pt[i0] as usize].wrapping_add(rk[4*r+3]))) & 0xFF;

}

fn dec_final_transformation(pt:&mut[u8; 8], rk:&mut [u8; 136]) {

    pt[0] = pt[0].wrapping_sub(rk[0]);
    pt[2] = pt[2] ^ rk[1];
    pt[4] = pt[4].wrapping_sub(rk[2]);
    pt[6] = pt[6] ^ rk[3];

    
}

fn main() {

    let mut rk: [u8; 136] = [0; 136];
    let mk: [u8; 16] = [0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff];
    let mut pt: [u8; 8] = [0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0x00];

    keyschedule(&mut rk, &mk);

    // Encryption
    initial_transformation(&mut pt, &mut rk);
    
    round_function(&mut pt, &mut rk,  2,  7,6,5,4,3,2,1,0);
    round_function(&mut pt, &mut rk,  3,  6,5,4,3,2,1,0,7);
    round_function(&mut pt, &mut rk,  4,  5,4,3,2,1,0,7,6);
    round_function(&mut pt, &mut rk,  5,  4,3,2,1,0,7,6,5);
    round_function(&mut pt, &mut rk,  6,  3,2,1,0,7,6,5,4);
    round_function(&mut pt, &mut rk,  7,  2,1,0,7,6,5,4,3);
    round_function(&mut pt, &mut rk,  8,  1,0,7,6,5,4,3,2);
    round_function(&mut pt, &mut rk,  9,  0,7,6,5,4,3,2,1);
    round_function(&mut pt, &mut rk, 10,  7,6,5,4,3,2,1,0);
    round_function(&mut pt, &mut rk, 11,  6,5,4,3,2,1,0,7);
    round_function(&mut pt, &mut rk, 12,  5,4,3,2,1,0,7,6);
    round_function(&mut pt, &mut rk, 13,  4,3,2,1,0,7,6,5);
    round_function(&mut pt, &mut rk, 14,  3,2,1,0,7,6,5,4);
    round_function(&mut pt, &mut rk, 15,  2,1,0,7,6,5,4,3);
    round_function(&mut pt, &mut rk, 16,  1,0,7,6,5,4,3,2);
    round_function(&mut pt, &mut rk, 17,  0,7,6,5,4,3,2,1);
    round_function(&mut pt, &mut rk, 18,  7,6,5,4,3,2,1,0);
    round_function(&mut pt, &mut rk, 19,  6,5,4,3,2,1,0,7);
    round_function(&mut pt, &mut rk, 20,  5,4,3,2,1,0,7,6);
    round_function(&mut pt, &mut rk, 21,  4,3,2,1,0,7,6,5);
    round_function(&mut pt, &mut rk, 22,  3,2,1,0,7,6,5,4);
    round_function(&mut pt, &mut rk, 23,  2,1,0,7,6,5,4,3);
    round_function(&mut pt, &mut rk, 24,  1,0,7,6,5,4,3,2);
    round_function(&mut pt, &mut rk, 25,  0,7,6,5,4,3,2,1);
    round_function(&mut pt, &mut rk, 26,  7,6,5,4,3,2,1,0);
    round_function(&mut pt, &mut rk, 27,  6,5,4,3,2,1,0,7);
    round_function(&mut pt, &mut rk, 28,  5,4,3,2,1,0,7,6);
    round_function(&mut pt, &mut rk, 29,  4,3,2,1,0,7,6,5);
    round_function(&mut pt, &mut rk, 30,  3,2,1,0,7,6,5,4);
    round_function(&mut pt, &mut rk, 31,  2,1,0,7,6,5,4,3);
    round_function(&mut pt, &mut rk, 32,  1,0,7,6,5,4,3,2);
    round_function(&mut pt, &mut rk, 33,  0,7,6,5,4,3,2,1);

    final_transformation(&mut pt, &mut rk);

    println!("Encyrption...");

    for i in 0..8 {
        println!("{:x}", pt[i]);
    }

    // Decryption
    dec_initial_transformation(&mut pt, &mut rk);

    dec_round_function(&mut pt, &mut rk, 33,  7,6,5,4,3,2,1,0);
    dec_round_function(&mut pt, &mut rk, 32,  0,7,6,5,4,3,2,1);
    dec_round_function(&mut pt, &mut rk, 31,  1,0,7,6,5,4,3,2);
    dec_round_function(&mut pt, &mut rk, 30,  2,1,0,7,6,5,4,3);
    dec_round_function(&mut pt, &mut rk, 29,  3,2,1,0,7,6,5,4);
    dec_round_function(&mut pt, &mut rk, 28,  4,3,2,1,0,7,6,5);
    dec_round_function(&mut pt, &mut rk, 27,  5,4,3,2,1,0,7,6);
    dec_round_function(&mut pt, &mut rk, 26,  6,5,4,3,2,1,0,7);
    dec_round_function(&mut pt, &mut rk, 25,  7,6,5,4,3,2,1,0);
    dec_round_function(&mut pt, &mut rk, 24,  0,7,6,5,4,3,2,1);
    dec_round_function(&mut pt, &mut rk, 23,  1,0,7,6,5,4,3,2);
    dec_round_function(&mut pt, &mut rk, 22,  2,1,0,7,6,5,4,3);
    dec_round_function(&mut pt, &mut rk, 21,  3,2,1,0,7,6,5,4);
    dec_round_function(&mut pt, &mut rk, 20,  4,3,2,1,0,7,6,5);
    dec_round_function(&mut pt, &mut rk, 19,  5,4,3,2,1,0,7,6);
    dec_round_function(&mut pt, &mut rk, 18,  6,5,4,3,2,1,0,7);
    dec_round_function(&mut pt, &mut rk, 17,  7,6,5,4,3,2,1,0);
    dec_round_function(&mut pt, &mut rk, 16,  0,7,6,5,4,3,2,1);
    dec_round_function(&mut pt, &mut rk, 15,  1,0,7,6,5,4,3,2);
    dec_round_function(&mut pt, &mut rk, 14,  2,1,0,7,6,5,4,3);
    dec_round_function(&mut pt, &mut rk, 13,  3,2,1,0,7,6,5,4);
    dec_round_function(&mut pt, &mut rk, 12,  4,3,2,1,0,7,6,5);
    dec_round_function(&mut pt, &mut rk, 11,  5,4,3,2,1,0,7,6);
    dec_round_function(&mut pt, &mut rk, 10,  6,5,4,3,2,1,0,7);
    dec_round_function(&mut pt, &mut rk,  9,  7,6,5,4,3,2,1,0);
    dec_round_function(&mut pt, &mut rk,  8,  0,7,6,5,4,3,2,1);
    dec_round_function(&mut pt, &mut rk,  7,  1,0,7,6,5,4,3,2);
    dec_round_function(&mut pt, &mut rk,  6,  2,1,0,7,6,5,4,3);
    dec_round_function(&mut pt, &mut rk,  5,  3,2,1,0,7,6,5,4);
    dec_round_function(&mut pt, &mut rk,  4,  4,3,2,1,0,7,6,5);
    dec_round_function(&mut pt, &mut rk,  3,  5,4,3,2,1,0,7,6);
    dec_round_function(&mut pt, &mut rk,  2,  6,5,4,3,2,1,0,7);

    dec_final_transformation(&mut pt, &mut rk);

    println!("Decyrption...");

    for i in 0..8 {
        println!("{:x}", pt[i]);
    }
}
